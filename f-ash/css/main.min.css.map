{"version":3,"sources":["layout/_grid.scss","home/rof/src/github.com/CityUniversityLondon/city-sport/node_modules/include-media/dist/_include-media.scss","abstracts/_measurements.scss","base/_page.scss","abstracts/_colors.scss","abstracts/_variables.scss","base/_reset.scss","base/_content.scss","base/_typography.scss","patterns/footer/_global-footer.scss","patterns/footer/_footer-opening-hours.scss","patterns/header/_global-header.scss","patterns/navigation/_navigation--primary.scss","patterns/navigation/_navigation--secondary.scss","patterns/navigation/_navigation--mobile.scss"],"names":[],"mappings":"AAgFA;EACI;EA1EA;EACA;;AC+jBA;EDvfJ;IArEQ,iBESS;;;ADmjBb;EDvfJ;IAjEQ,iBESU;;;;ACjBlB;EACI,kBCiCW;EDhCX,OCuOc;EDtOd;EACA;EACA;EACA;EACA;;AFyjBA;EEhkBJ;IAUQ;;;;AAIR;EACI;EACA;EACA;;AF+iBA;EEljBJ;IAKQ;;;;AAIR;AAAA;AAAA;EAGI;;;AAGJ;EACI;EACA,ODMe;;;AC+Bf;EACI,kBCoKU;EDnKV;EACA;;AAEA;EHxDJ;EAjBA;EACA;;AC+jBA;EEvfI;IHrEA,iBESS;;;ADmjBb;EEvfI;IHjEA,iBESU;;;AC4DV;EACI;EACA,SDtEI;EC0BZ,aDtBa;ECuBb,cDvBa;ECwBb,WELS;;AJgiBT;EEnfI;IArCA,aDvBU;ICwBV,cDxBU;;;AD+iBd;EEnfI;IAMQ;IACA;;;AAKZ;EACI;;AAEA;EACI;;;AAMR;EACI;;;AGrGR;EACI;;;AAGJ;EACI;;;AAGJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAeI;EACA;EACA;;;AAGJ;EACI;;;AAGJ;AAAA;AAAA;AAAA;AAAA;AAAA;EAMI;;;AAGJ;AAAA;EAEI,aDiBe;;;ACdnB;AAAA;EAEI;;;AAGJ;EACI;;;AAGJ;EACI;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;AAGJ;AAAA;EAEI;;;AAGJ;EACI;EACA;;;AAGJ;EACI;EACA;EACA;;;AAGJ;EACI;EACA,QJtEa;;;AIyEjB;EACI;;;ACvFJ;EAII,WCEgB;EDDhB;EACA,aF+Ce;EE9Cf;EACA;;ANwjBA;EMhkBJ;IAWQ,WCHa;;;APwjBjB;EMhkBJ;IAeQ,WCLW;;;APsjBf;EMhkBJ;IAmBQ,WCPQ;;;APojBZ;EMhkBJ;IAuBQ,WCTQ;;;;AChBhB;EACI,YLmCW;EKlCX,OLyOc;EKxOd;EACA;EACA;EACA;EACA;;AR2jBA;EQlkBJ;INqCI,aDtBa;ICuBb,cDvBa;ICwBb,WELS;IFeT,cD9Bc;IC+Bd,eD/Bc;IFjBd;IACA;;;AC+jBA;EQlkBJ;IN0CQ,aDvBU;ICwBV,cDxBU;;;AD+iBd;EQlkBJ;INqDQ,cD9BU;IC+BV,eD/BU;;;AD2iBd;EQlkBJ;INgEQ;IACA;;;AFigBJ;EQlkBJ;ITMQ,iBESS;;;ADmjBb;EQlkBJ;ITUQ,iBESU;;;;AOHlB;EACI,gBPMc;EC0Bd,cD9Bc;EC+Bd,eD/Bc;;AD+iBd;EQljBJ;INqCQ,cD9BU;IC+BV,eD/BU;;;;AQ5BlB;EACI;;;ACDJ;EACI;;;ACDJ;EACI;;;ACDJ;EACI;;;ACDJ;EACI","sourcesContent":["////\n/// Grid\n/// @group layout\n////\n@use '../abstracts' as *;\n\n@mixin x-column-grid($columns: 24) {\n    grid-template-columns: repeat($columns, 1fr);\n    grid-column-gap: 0;\n\n    @include media('>=tablet') {\n        grid-column-gap: $measure--basic;\n    }\n\n    @include media('>between') {\n        grid-column-gap: $measure--small2;\n    }\n}\n\n@mixin standard-grid-columns-only() {\n    @include x-column-grid(24);\n}\n\n@mixin standard-grid() {\n    display: grid;\n    @include x-column-grid(24);\n    \n}\n\n@mixin content-grid-columns-only() {\n    @include x-column-grid(18);\n}\n\n@mixin content-grid() {\n    display: grid;\n    @include x-column-grid(18);\n    \n}\n\n@mixin eightcolumn-sub-grid() {\n    display: grid;\n    grid-row-gap: 0;\n\n    @include media('<=mobile') {\n        grid-column-gap: $measure--basic;\n    }\n\n    @include media('>mobile', '<=between') {\n        grid-column-gap: $measure--basic;\n    }\n\n    @include media('>between') {\n        grid-column-gap: $measure--small2;\n    }\n\n    @include media('<tablet') {\n        grid-template-columns: repeat(4, 1fr);\n    }\n\n    @include media('>=tablet') {\n        grid-template-columns: repeat(8, 1fr);\n    }\n}\n\n@mixin ninetyten-grid() {\n    display: grid;\n    grid-template-columns: 9fr 1fr;\n    grid-column-gap: $measure--basic;\n    grid-row-gap: $measure--basic;\n}\n\n%ninetyten-grid {\n    @include ninetyten-grid();\n}\n\n@mixin standard-grid-wrapper() {\n    @include standard-grid();\n    @include default-padding();\n}\n\n.standard-grid-wrapper {\n    display: grid;\n    @include x-column-grid(18);\n    \n}\n\n// sixteen-grid() is to be used inside standard grid with 1-column\n// space on each side to its parent element on 'desktop' width -as on 'case-study' PL\n@mixin sixteen-grid() {\n    display: grid;\n    grid-row-gap: 0;\n\n    @include media('<=mobile') {\n        grid-column-gap: $measure--basic;\n        grid-template-columns: repeat(6, 1fr);\n    }\n\n    @include media('>mobile', '<=between') {\n        grid-column-gap: $measure--basic;\n        grid-template-columns: repeat(12, 1fr);\n    }\n\n    @include media('>between') {\n        grid-column-gap: $measure--small2;\n        grid-template-columns: repeat(16, 1fr);\n    }\n}\n","//     _            _           _                           _ _\n//    (_)          | |         | |                         | (_)\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\n//\n//      Simple, elegant and maintainable media queries in Sass\n//                        v2.0.0\n//\n//        https://eduardoboucas.github.io/include-media\n//\n//         Authors: Eduardo Boucas (@eduardoboucas)\n//                  Kitty Giraudel (@kittygiraudel)\n//\n//      This project is licensed under the terms of the MIT license\n@charset \"UTF-8\";\n\n////\n/// include-media library public configuration\n/// @author Eduardo Boucas\n/// @access public\n////\n@use 'sass:math';\n@use 'sass:map';\n@use 'sass:list';\n@use 'sass:string';\n@use 'sass:meta';\n\n///\n/// Creates a list of global breakpoints\n///\n/// @example scss - Creates a single breakpoint with the label `phone`\n///  $breakpoints: ('phone': 320px);\n///\n$breakpoints: (\n  'phone': 320px,\n  'tablet': 768px,\n  'desktop': 1024px,\n) !default;\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\n///  );\n///\n$media-expressions: (\n  'screen': 'screen',\n  'print': 'print',\n  'handheld': 'handheld',\n  'landscape': '(orientation: landscape)',\n  'portrait': '(orientation: portrait)',\n  'retina2x':\n    '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\n  'retina3x':\n    '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)',\n) !default;\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media('>128px') {}\n///\n///  /* Generates: */\n///  @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media('>20em') {}\n///\n///  /* Generates: */\n///  @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media('>2.0rem') {}\n///\n///  /* Generates: */\n///  @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  'px': 1,\n  'em': 0.01,\n  'rem': 0.1,\n  '': 0,\n) !default;\n\n///\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\n/// for browsers that don't support media queries.\n///\n/// @example scss - Disables support for media queries\n///  $im-media-support: false;\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n$im-media-support: true !default;\n\n///\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\n/// intercept the breakpoint will be displayed, any others will be ignored.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'tablet';\n///  @include media('>=desktop') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-breakpoint: 'desktop' !default;\n\n///\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\n/// are not supported.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'screen') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///   /* Generates: */\n///   .foo {\n///     color: tomato;\n///   }\n///\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'retina2x') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\n\n////\n/// Cross-engine logging engine\n/// @author Kitty Giraudel\n/// @access private\n////\n\n///\n/// Log a message either with `@error` if supported\n/// else with `@warn`, using `feature-exists('at-error')`\n/// to detect support.\n///\n/// @param {String} $message - Message to log\n///\n@function im-log($message) {\n  @if meta.feature-exists('at-error') {\n    @error $message;\n  } @else {\n    @warn $message;\n    $_: noop();\n  }\n\n  @return $message;\n}\n\n///\n/// Wrapper mixin for the log function so it can be used with a more friendly\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\n/// within functions because it is not possible to include a mixin in a function\n/// and use the mixin everywhere else because it's much more elegant.\n///\n/// @param {String} $message - Message to log\n///\n@mixin log($message) {\n  @if im-log($message) {\n  }\n}\n\n///\n/// Function with no `@return` called next to `@warn` in Sass 3.3\n/// to trigger a compiling error and stop the process.\n///\n@function noop() {\n}\n\n///\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\n///\n@function im-intercepts-static-breakpoint($conditions...) {\n  $no-media-breakpoint-value: map.get($breakpoints, $im-no-media-breakpoint);\n\n  @if not $no-media-breakpoint-value {\n    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {\n    }\n  }\n\n  @each $condition in $conditions {\n    @if not map.has-key($media-expressions, $condition) {\n      $operator: get-expression-operator($condition);\n      $prefix: get-expression-prefix($operator);\n      $value: get-expression-value($condition, $operator);\n\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\n        ($prefix == 'min' and $value > $no-media-breakpoint-value)\n      {\n        @return false;\n      }\n    } @else if not list.index($im-no-media-expressions, $condition) {\n      @return false;\n    }\n  }\n\n  @return true;\n}\n\n////\n/// Parsing engine\n/// @author Kitty Giraudel\n/// @access private\n////\n\n///\n/// Get operator of an expression\n///\n/// @param {String} $expression - Expression to extract operator from\n///\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\n///\n@function get-expression-operator($expression) {\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\n    @if string.index($expression, $operator) {\n      @return $operator;\n    }\n  }\n\n  // It is not possible to include a mixin inside a function, so we have to\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n  // functions cannot be called anywhere in Sass, we need to hack the call in\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n  $_: im-log('No operator found in `#{$expression}`.');\n}\n\n///\n/// Get dimension of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract dimension from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {String} - `width` or `height` (or potentially anything else)\n///\n@function get-expression-dimension($expression, $operator) {\n  $operator-index: string.index($expression, $operator);\n  $parsed-dimension: string.slice($expression, 0, $operator-index - 1);\n  $dimension: 'width';\n\n  @if string.length($parsed-dimension) > 0 {\n    $dimension: $parsed-dimension;\n  }\n\n  @return $dimension;\n}\n\n///\n/// Get dimension prefix based on an operator\n///\n/// @param {String} $operator - Operator\n///\n/// @return {String} - `min` or `max`\n///\n@function get-expression-prefix($operator) {\n  @return if(list.index(('<', '<=', '≤'), $operator), 'max', 'min');\n}\n\n///\n/// Get value of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract value from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {Number} - A numeric value\n///\n@function get-expression-value($expression, $operator) {\n  $operator-index: string.index($expression, $operator);\n  $value: string.slice($expression, $operator-index + string.length($operator));\n\n  @if map.has-key($breakpoints, $value) {\n    $value: map.get($breakpoints, $value);\n  } @else {\n    $value: to-number($value);\n  }\n\n  $interval: map.get($unit-intervals, math.unit($value));\n\n  @if not $interval {\n    // It is not possible to include a mixin inside a function, so we have to\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n    // functions cannot be called anywhere in Sass, we need to hack the call in\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n    $_: im-log('Unknown unit `#{math.unit($value)}`.');\n  }\n\n  @if $operator == '>' {\n    $value: $value + $interval;\n  } @else if $operator == '<' {\n    $value: $value - $interval;\n  }\n\n  @return $value;\n}\n\n///\n/// Parse an expression to return a valid media-query expression\n///\n/// @param {String} $expression - Expression to parse\n///\n/// @return {String} - Valid media query\n///\n@function parse-expression($expression) {\n  // If it is part of $media-expressions, it has no operator\n  // then there is no need to go any further, just return the value\n  @if map.has-key($media-expressions, $expression) {\n    @return map.get($media-expressions, $expression);\n  }\n\n  $operator: get-expression-operator($expression);\n  $dimension: get-expression-dimension($expression, $operator);\n  $prefix: get-expression-prefix($operator);\n  $value: get-expression-value($expression, $operator);\n\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\n}\n\n///\n/// Slice `$list` between `$start` and `$end` indexes\n///\n/// @access private\n///\n/// @param {List} $list - List to slice\n/// @param {Number} $start [1] - Start index\n/// @param {Number} $end [length($list)] - End index\n///\n/// @return {List} Sliced list\n///\n@function slice($list, $start: 1, $end: list.length($list)) {\n  @if list.length($list) < 1 or $start > $end {\n    @return ();\n  }\n\n  $result: ();\n\n  @for $i from $start through $end {\n    $result: list.append($result, list.nth($list, $i), comma);\n  }\n\n  @return $result;\n}\n\n////\n/// String to number converter\n/// @author Kitty Giraudel\n/// @access private\n////\n\n///\n/// Casts a string into a number\n///\n/// @param {String | Number} $value - Value to be parsed\n///\n/// @return {Number}\n///\n\n@function to-number($value) {\n  @if meta.type-of($value) == 'number' {\n    @return $value;\n  } @else if meta.type-of($value) != 'string' {\n    $_: im-log('Value for `to-number` should be a number or a string.');\n  }\n\n  $first-character: string.slice($value, 1, 1);\n  $result: 0;\n  $digits: 0;\n  $minus: ($first-character == '-');\n  $numbers: (\n    '0': 0,\n    '1': 1,\n    '2': 2,\n    '3': 3,\n    '4': 4,\n    '5': 5,\n    '6': 6,\n    '7': 7,\n    '8': 8,\n    '9': 9,\n  );\n\n  // Remove +/- sign if present at first character\n  @if ($first-character == '+' or $first-character == '-') {\n    $value: string.slice($value, 2);\n  }\n\n  @for $i from 1 through string.length($value) {\n    $character: string.slice($value, $i, $i);\n\n    @if not(list.index(map.keys($numbers), $character) or $character == '.') {\n      @return to-length(if($minus, -$result, $result), string.slice($value, $i));\n    }\n\n    @if $character == '.' {\n      $digits: 1;\n    } @else if $digits == 0 {\n      $result: $result * 10 + map.get($numbers, $character);\n    } @else {\n      $digits: $digits * 10;\n      $result: $result + math.div(map.get($numbers, $character), $digits);\n    }\n  }\n\n  @return if($minus, -$result, $result);\n}\n\n///\n/// Add `$unit` to `$value`\n///\n/// @param {Number} $value - Value to add unit to\n/// @param {String} $unit - String representation of the unit\n///\n/// @return {Number} - `$value` expressed in `$unit`\n///\n@function to-length($value, $unit) {\n  $units: (\n    'px': 1px,\n    'cm': 1cm,\n    'mm': 1mm,\n    '%': 1%,\n    'ch': 1ch,\n    'pc': 1pc,\n    'in': 1in,\n    'em': 1em,\n    'rem': 1rem,\n    'pt': 1pt,\n    'ex': 1ex,\n    'vw': 1vw,\n    'vh': 1vh,\n    'vmin': 1vmin,\n    'vmax': 1vmax,\n  );\n\n  @if not list.index(map.keys($units), $unit) {\n    $_: im-log('Invalid unit `#{$unit}`.');\n  }\n\n  @return $value * map.get($units, $unit);\n}\n\n///\n/// This mixin aims at redefining the configuration just for the scope of\n/// the call. It is helpful when having a component needing an extended\n/// configuration such as custom breakpoints (referred to as tweakpoints)\n/// for instance.\n///\n/// @author Kitty Giraudel\n///\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\n///\n/// @example scss - Extend the global breakpoints with a tweakpoint\n///  @include media-context(('custom': 678px)) {\n///    .foo {\n///      @include media('>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend the global media expressions with a custom one\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend both configuration maps\n///  @include media-context(('custom': 678px), ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\n  // Save global configuration\n  $global-breakpoints: $breakpoints;\n  $global-media-expressions: $media-expressions;\n\n  // Update global configuration\n  $breakpoints: map.merge($breakpoints, $tweakpoints) !global;\n  $media-expressions: map.merge($media-expressions, $tweak-media-expressions) !global;\n\n  @content;\n\n  // Restore global configuration\n  $breakpoints: $global-breakpoints !global;\n  $media-expressions: $global-media-expressions !global;\n}\n\n////\n/// include-media public exposed API\n/// @author Eduardo Boucas\n/// @access public\n////\n\n///\n/// Generates a media query based on a list of conditions\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media('>phone') { }\n///\n/// @example scss - With two set breakpoints\n///  @include media('>phone', '<=tablet') { }\n///\n/// @example scss - With custom values\n///  @include media('>=358px', '<850px') { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media('>desktop', '<=1350px') { }\n///\n/// @example scss - With a static expression\n///  @include media('retina2x') { }\n///\n/// @example scss - Mixing everything\n///  @include media('>=350px', '<tablet', 'retina3x') { }\n///\n@mixin media($conditions...) {\n  @if ($im-media-support and list.length($conditions) == 0) or\n    (not $im-media-support and im-intercepts-static-breakpoint($conditions...))\n  {\n    @content;\n  } @else if ($im-media-support and list.length($conditions) > 0) {\n    @media #{string.unquote(parse-expression(list.nth($conditions, 1)))} {\n      // Recursive call\n      @include media(slice($conditions, 2)...) {\n        @content;\n      }\n    }\n  }\n}\n","////\n/// Measurements\n/// @group abstracts\n////\n/// @type Length\n$border-width-hairline: 0.0625rem !default; // ~ 1px\n/// @type Length\n$border-width-default: 0.125rem !default; // ~ 2px\n/// @type Length\n$border-width-thick: 0.1875rem !default; // ~ 3px\n/// @type Length\n$border-width-thicker: 0.25rem !default; // ~ 4px\n\n/// @type Length\n$measure--quarter: 0.25rem !default;\n/// @type Length\n$measure--half: 0.5rem !default;\n/// @type Length\n$measure--threequarters: 0.75rem !default;\n/// @type Length\n$measure--basic: 1rem !default;\n/// @type Length\n$measure--small1: 1.25rem !default;\n/// @type Length\n$measure--small2: 1.5rem !default;\n/// @type Length\n$measure--small3: 1.75rem !default;\n/// @type Length\n$measure--small4: 2rem !default;\n/// @type Length\n$measure--small5: 2.25rem !default;\n/// @type Length\n$measure--medium1: 2.5rem !default;\n/// @type Length\n$measure--medium2: 2.75rem !default;\n/// @type Length\n$measure--medium3: 3rem !default;\n/// @type Length\n$measure--medium4: 3.25rem !default;\n/// @type Length\n$measure--medium5: 3.5rem !default;\n/// @type Length\n$measure--medium6: 3.75rem !default;\n/// @type Length\n$measure--medium7: 4rem !default;\n/// @type Length\n$measure--medium8: 4.25rem !default;\n/// @type Length\n$measure--medium9: 4.5rem !default;\n/// @type Length\n$measure--medium10: 4.75rem !default;\n/// @type Length\n$measure--medium11: 5rem !default;\n/// @type Length\n$measure--large1: 5.5rem !default;\n/// @type Length\n$measure--large2: 6rem !default;\n/// @type Length\n$measure--large3: 6.5rem !default;\n/// @type Length\n$measure--large4: 7rem !default;\n/// @type Length\n$measure--large5: 7.5rem !default;\n/// @type Length\n$measure--huge1: 8rem !default;\n/// @type Length\n$measure--huge2: 8.5rem !default;\n/// @type Length\n$measure--huge3: 9rem !default;\n/// @type Length\n$measure--huge4: 9.5rem !default;\n/// @type Length\n$measure--huge5: 10rem !default;\n","@use '../layout' as *;\n@use '../abstracts' as *;\n\n////\n/// Page\n/// @group base\n////\nhtml {\n    background-color: $color-nearblack;\n    color: $color-purewhite;\n    box-sizing: border-box;\n    min-height: 100%;\n    overflow-x: hidden;\n    overflow-y: scroll;\n    scroll-behavior: smooth;\n    \n    @include media('reducemotion') {\n        scroll-behavior: auto;\n    }   \n}\n\nbody {\n    min-height: 100vh;\n    position: relative;\n    scroll-behavior: smooth;\n    @include media('reducemotion') {\n        scroll-behavior: auto;\n    }   \n}\n\n*,\n*:before,\n*:after {\n    box-sizing: inherit;\n}\n\n.logo {\n    display: block;\n    width: $measure--medium7;\n}\n\n@mixin default-margin() {\n    margin-left: $measure--basic;\n    margin-right: $measure--basic;\n    max-width: $width--max;\n\n    @include media('>between') {\n        margin-left: $measure--small2;\n        margin-right: $measure--small2;\n    }\n        \n}\n\n@mixin default-padding() {\n    padding-left: $measure--small2;\n    padding-right: $measure--small2;\n\n    @include media('>between') {\n        padding-left: $measure--small4;\n        padding-right: $measure--small4;\n    }\n        \n}\n\n@mixin standard-box() {\n    @include default-margin();\n    @include default-padding();\n\n    @include media('>large') {\n        margin-left: auto;\n        margin-right: auto;\n    }     \n}\n\nmain {\n    article {\n        background-color: $color-purewhite;\n        grid-column: 1/-1;\n        height: max-content;\n\n        .content-wrapper {\n            @include standard-grid();\n        }\n\n        .content {\n            grid-column: 1/-1;\n            padding: $measure--half;\n            @include default-margin();\n            \n            @include media('>=small') {\n                grid-column: 2/-2;\n                margin: 0;\n            }\n        }\n    }\n\n    .navigation--secondary {\n        grid-column: 1 / span 6;\n\n        & + article {\n            grid-column: 7 / span 18;\n        }\n    }\n}\n\n.js {\n    .nojs-only {\n        display: none;\n    }\n}","////\n/// Colors\n/// @group abstracts\n////\n\n////\n/// City-lite palette\n///\n/// Avoid using these directly, create a variable named by semantic purpose in\n/// _palette.scss where the purpose can be identified\n////\n/// @type Color\n$color-linkblue: #006bbd !default;\n/// @type Color\n$color-linkpurple: #4c2c92 !default;\n/// @type Color\n$color-linkblue--dark: #6894c0 !default;\n/// @type Color\n$color-linkpurple--dark: #9b7ed9 !default;\n\n/// @type Color\n$color-gray1: #f2f2f2 !default;\n/// @type Color\n$color-gray2: #e5e5e5 !default;\n/// @type Color\n$color-gray3: #d8d8d8 !default;\n/// @type Color\n$color-gray4: #cbcbcb !default;\n/// @type Color\n$color-gray5: #bebebe !default;\n/// @type Color\n$color-gray6: #a1a1a1 !default;\n/// @type Color\n$color-gray7: #696969 !default;\n/// @type Color\n$color-gray8: #494949 !default;\n/// @type Color\n$color-gray9: #303030 !default;\n/// @type Color\n$color-gray10: #1e1e1e !default;\n/// @type Color\n$color-gray11: #0c0c0e !default;\n/// @type Color\n$color-gray12: #919191 !default;\n/// @type Color\n$color-gray13: #e7ebed !default;\n/// @type Color\n$color-gray14: #0c0c0e40 !default;\n/// @type Color\n$color-red5: #fdf0ed !default;\n/// @type Color\n$color-red10: #fec2c3 !default;\n/// @type Color\n$color-red20: #fe8f91 !default;\n/// @type Color\n$color-red30: #f56067 !default;\n/// @type Color\n$color-red40: #e93745 !default;\n/// @type Color\n$color-red50: #d61726 !default;\n/// @type Color\n$color-red60: #b91924 !default;\n/// @type Color\n$color-red70: #9e111c !default;\n/// @type Color\n$color-red80: #790b21 !default;\n/// @type Color\n$color-red90: #5b0b1b !default;\n/// @type Color\n$color-red100: #370612 !default;\n/// @type Color\n$color-purple5: #ede8f2 !default;\n/// @type Color\n$color-purple10: #d6bcf6 !default;\n/// @type Color\n$color-purple20: #b382ec !default;\n/// @type Color\n$color-purple30: #9a4ddb !default;\n/// @type Color\n$color-purple40: #8e3bbb !default;\n/// @type Color\n$color-purple50: #832c9e !default;\n/// @type Color\n$color-purple60: #65218e !default;\n/// @type Color\n$color-purple70: #541b85 !default;\n/// @type Color\n$color-purple80: #3f1464 !default;\n/// @type Color\n$color-purple90: #2a0d43 !default;\n/// @type Color\n$color-purple100: #190929 !default;\n/// @type Color\n$color-blue10: #8ee1fe !default;\n/// @type Color\n$color-blue20: #5fd8fe !default;\n/// @type Color\n$color-blue30: #19c3fe !default;\n/// @type Color\n$color-blue40: #0194c7 !default;\n/// @type Color\n$color-blue50: #0177a0 !default;\n/// @type Color\n$color-blue60: #015a79 !default;\n/// @type Color\n$color-blue70: #213d50 !default;\n/// @type Color\n$color-blue80: #11334c !default;\n/// @type Color\n$color-blue90: #00294a !default;\n/// @type Color\n$color-blue100: #001323 !default;\n/// @type Color\n$color-brown5: #f2f0f0 !default;\n/// @type Color\n$color-brown10: #ece8e5 !default;\n/// @type Color\n$color-brown20: #dfdcdb !default;\n/// @type Color\n$color-brown30: #cdc8c7 !default;\n/// @type Color\n$color-brown40: #bab4b2 !default;\n/// @type Color\n$color-brown50: #a7a09d !default;\n/// @type Color\n$color-brown60: #958c89 !default;\n/// @type Color\n$color-brown70: #827874 !default;\n/// @type Color\n$color-brown80: #6d6562 !default;\n/// @type Color\n$color-brown90: #59524f !default;\n/// @type Color\n$color-brown100: #443f3d !default;\n/// @type Color\n$color-green10: #cce1b4 !default;\n/// @type Color\n$color-green20: #b9d698 !default;\n/// @type Color\n$color-green30: #a6ca7c !default;\n/// @type Color\n$color-green40: #93bf60 !default;\n/// @type Color\n$color-green50: #6c953c !default;\n/// @type Color\n$color-green60: #427844 !default;\n/// @type Color\n$color-green70: #286760 !default;\n/// @type Color\n$color-green80: #305731 !default;\n/// @type Color\n$color-green90: #274728 !default;\n/// @type Color\n$color-green100: #1f3920 !default;\n/// @type Color\n$color-orange10: #fbc9b5 !default;\n/// @type Color\n$color-orange20: #f9ae90 !default;\n/// @type Color\n$color-orange30: #f6936b !default;\n/// @type Color\n$color-orange40: #f47846 !default;\n/// @type Color\n$color-orange50: #f25d21 !default;\n/// @type Color\n$color-orange60: #cc430c !default;\n/// @type Color\n$color-orange70: #953109 !default;\n/// @type Color\n$color-orange80: #65322f !default;\n/// @type Color\n$color-orange90: #4a2523 !default;\n/// @type Color\n$color-orange100: #221110 !default;\n/// @type Color\n$color-pink10: #ebb1da !default;\n/// @type Color\n$color-pink20: #df82c4 !default;\n/// @type Color\n$color-pink30: #d763b6 !default;\n/// @type Color\n$color-pink40: #cf44a7 !default;\n/// @type Color\n$color-pink50: #bb3094 !default;\n/// @type Color\n$color-pink60: #9c287b !default;\n/// @type Color\n$color-pink70: #7c2062 !default;\n/// @type Color\n$color-pink80: #5d184a !default;\n/// @type Color\n$color-pink90: #3e1031 !default;\n/// @type Color\n$color-pink95: #270621 !default;\n/// @type Color\n$color-pink100: #250020 !default;\n/// @type Color\n$color-teal10: #b2e6eb !default;\n/// @type Color\n$color-teal20: #7fd6df !default;\n/// @type Color\n$color-teal30: #4cc5d2 !default;\n/// @type Color\n$color-teal40: #19b5c5 !default;\n/// @type Color\n$color-teal50: #039cab !default;\n/// @type Color\n$color-teal60: #007e8b !default;\n/// @type Color\n$color-teal70: #006973 !default;\n/// @type Color\n$color-teal80: #005058 !default;\n/// @type Color\n$color-teal90: #00393f !default;\n/// @type Color\n$color-teal100: #002225 !default;\n/// @type Color\n$color-yellow10: #fff579 !default;\n/// @type Color\n$color-yellow20: #ffef2b !default;\n/// @type Color\n$color-yellow30: #efdd00 !default;\n/// @type Color\n$color-yellow40: #f1c70b !default;\n/// @type Color\n$color-yellow50: #f4b017 !default;\n/// @type Color\n$color-yellow60: #d8a533 !default;\n/// @type Color\n$color-yellow70: #ba9950 !default;\n/// @type Color\n$color-yellow80: #826c3b !default;\n/// @type Color\n$color-yellow90: #4c3f22 !default;\n/// @type Color\n$color-yellow100: #2c2200 !default;\n\n/// @type Color\n$color-nearblack: $color-gray11 !default;\n/// @type Color\n$color-purewhite: #ffffff !default;\n/// @type Color\n$color-mid-grey: #999999 !default;\n","\n////\n/// Variables\n/// @group abstracts\n////\n/// @type Length\n$width--tiny: 375px !default;\n/// @type Length\n$width--mobile: 432px !default;\n/// @type Length\n$width--tablet: 768px !default;\n/// @type Length\n$width--between: 900px !default;\n/// @type Length\n$width--small: 1024px !default;\n/// @type Length\n$width--desktop: 1280px !default;\n/// @type Length\n$width--large: 1440px !default;\n/// @type Length\n$width--1080p: 1920px !default;\n/// @type Length\n$width--4K: 3840px !default;\n/// @type Length\n$width--8K: 7680px !default;\n\n$breakpoints: (\n    'tiny': $width--tiny,\n    'mobile': $width--mobile,\n    'tablet': $width--tablet,\n    'between': $width--between,\n    'small': $width--small,\n    'desktop': $width--desktop,\n    'large': $width--large,\n    '1080p': $width--1080p,\n    '4K': $width--4K,\n    '8K': $width--8K,\n) !default;\n\n$width--max: 80rem !default;\n\n$media-expressions: (\n    'hover': '(hover: hover)',\n    'nohover': '(hover: nohover)',\n    'print': 'print',\n    'reducemotion': '(prefers-reduced-motion: reduce)',\n    'screen': 'screen',\n) !default;\n\n//Font Weights\n\n/// @type Number\n$font-weight-hairline: 100 !default;\n/// @type Number\n$font-weight-thin: 200 !default;\n/// @type Number\n$font-weight-light: 300 !default;\n/// @type Number\n$font-weight-normal: 400 !default;\n/// @type Number\n$font-weight-text: 400 !default;\n/// @type Number\n$font-weight-book: 500 !default;\n/// @type Number\n$font-weight-medium: 600 !default;\n/// @type Number\n$font-weight-bold: 700 !default;\n/// @type Number\n$font-weight-black: 800 !default;\n/// @type Number\n$font-weight-extrablack: 900 !default;\n\n\n/// @type Map\n/// @prop {String} key - z-index name\n/// @prop {Number} value - z-index value\n/// @see {Function} z-index\n$z-indexes: (\n    'below': -1,\n    'default': 0,\n    'above': 1,\n    'inpage': 2,\n    'veil': 3,\n    'unveiled': 4,\n    'navigation': 5,\n    'modal': 6,\n) !default;","@use '../abstracts' as abs;\n\n////\n/// Reset\n/// @group base\n////\nhtml {\n    text-size-adjust: 100%;\n}\n\nbody {\n    margin: 0;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\np,\nblockquote,\nfigure,\nol,\nul,\ndl,\ndt,\ndd,\nfieldset {\n    border: 0;\n    margin: 0;\n    padding: 0;\n}\n\nmain {\n    display: block;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    font-size: inherit;\n}\n\nb,\nstrong {\n    font-weight: abs.$font-weight-bold;\n}\n\na,\nbutton {\n    color: inherit;\n}\n\na {\n    text-decoration: none;\n}\n\nbutton {\n    background: none;\n    border: 0;\n    cursor: pointer;\n    font: inherit;\n    letter-spacing: inherit;\n    overflow: visible;\n    padding: 0;\n    touch-action: manipulation;\n}\n\nlabel,\nselect {\n    cursor: pointer;\n}\n\n::-moz-focus-inner {\n    padding: 0;\n    border: 0;\n}\n\nimg {\n    max-width: 100%;\n    height: auto;\n    border: 0;\n}\n\niframe {\n    display: block;\n    margin: abs.$measure--basic;\n}\n\naddress {\n    font-style: inherit;\n}\n","@use '../abstracts' as *;\n@use './typography' as *;\n\n////\n/// Content\n/// @group base\n////\nhtml {\n    // @include font-family('default');\n    // @include body-font-features();\n\n    font-size: $font-size--mobile;\n    font-style: normal;\n    font-weight: $font-weight-text;\n    line-height: 1;\n    text-rendering: optimizeLegibility;\n    \n    @include media('>=desktop', '<1080p') {\n        font-size: $font-size--desktop;\n    }\n\n    @include media('>=1080p', '<4K') {\n        font-size: $font-size--1080p;\n    }\n\n    @include media('>=4K', '<8K') {\n        font-size: $font-size--4K;\n    }\n\n    @include media('>=8K') {\n        font-size: $font-size--8K;\n    }\n}","@use'sass:math';\n@use '../abstracts' as *;\n\n\n// @use '../fontawesome/fontawesome';\n// @use '../fontawesome/brands';\n// @use '../fontawesome/solid';\n// @use '../fontawesome/regular';\n// Temporary commented out due to deprecated code within fontawesome.\n\n\n\n/// @type Length\n$font-size--mobile: 16px !default;\n/// @type Length\n$font-size--desktop: 18px !default;\n/// @type Length\n$font-size--1080p: 22px !default;\n/// @type Length\n$font-size--4K: 46px !default;\n/// @type Length\n$font-size--8K: 92px !default;\n\n/// @type Length\n$max-line-length: 55ch !default;\n\n/// @type Length\n$font-size--basic: 1rem !default;\n\n///@type Length\n$font-size--icon: 0.875em !default;\n\n/// @type Number\n$font-size-dp: 3 !default;\n/// @type Number\n$font-size--ratio: math.div(9, 8) !default;\n/// @type Length\n$font-size--alpha: $font-size--basic !default;\n/// @type Length\n$font-size--beta: decimal-round(\n    ($font-size--alpha * $font-size--ratio),\n    $font-size-dp\n) !default;\n/// @type Length\n$font-size--gamma: decimal-round(\n    ($font-size--beta * $font-size--ratio),\n    $font-size-dp\n) !default;\n/// @type Length\n$font-size--delta: decimal-round(\n    ($font-size--gamma * $font-size--ratio),\n    $font-size-dp\n) !default;\n/// @type Length\n$font-size--epsilon: decimal-round(\n    ($font-size--delta * $font-size--ratio),\n    $font-size-dp\n) !default;\n/// @type Length\n$font-size--zeta: decimal-round(\n    ($font-size--epsilon * $font-size--ratio),\n    $font-size-dp\n) !default;\n/// @type Length\n$font-size--eta: decimal-round(\n    ($font-size--zeta * $font-size--ratio),\n    $font-size-dp\n) !default;\n/// @type Length\n$font-size--theta: decimal-round(\n    ($font-size--eta * $font-size--ratio),\n    $font-size-dp\n) !default;\n/// @type Length\n$font-size--smalltype: decimal-round(\n    calc($font-size--alpha / $font-size--ratio),\n    $font-size-dp\n) !default;\n/// @type Length\n$font-size--extrasmalltype: decimal-round(\n    calc($font-size--smalltype / $font-size--ratio),\n    $font-size-dp\n) !default;\n/// @type Length\n$font-size--sub: decimal-round(\n    calc($font-size--extrasmalltype / $font-size--ratio),\n    $font-size-dp\n) !default;\n\n$font-size--super: 0.7em;\n\n/// @type Length\n$font-size--pathway-yt-icon: $font-size--basic * 5;\n\n/// @type Number\n$line-height-ratio--heading: calc(8/6) !default;\n/// @type Number\n$line-height-ratio--body: calc(13/8) !default;\n/// @type Length\n$line-height--sub: strip-unit($font-size--sub) !default;\n\n/// @type Number\n$line-height-ratio--override--alpha: strip-unit($font-size--alpha) !default;\n/// @type Number\n$line-height-ratio--override--beta: strip-unit($font-size--beta) !default;\n/// @type Number\n$line-height-ratio--override--gamma: strip-unit($font-size--gamma) !default;\n/// @type Number\n$line-height-ratio--override--delta: strip-unit($font-size--delta) !default;\n/// @type Number\n$line-height-ratio--override--epsilon: strip-unit($font-size--epsilon) !default;\n/// @type Number\n$line-height-ratio--override--zeta: strip-unit($font-size--zeta) !default;\n","\n@use '../../abstracts' as *;\n@use '../../base' as *;\n@use '../../layout' as *;\n\n.global-footer {\n    background: $color-nearblack;\n    color: $color-purewhite;\n    border: thin solid white;\n    margin-left: 0;\n    margin-right: 0;\n    padding-left: 0;\n    padding-right: 0;\n\n    @include media('>=small') {\n        @include standard-box();\n        @include x-column-grid(24);\n    }\n  \n}\n\n.global-footer__container {\n    padding-bottom: $measure--small4;\n        @include default-padding();\n        \n\n}",".footer-opening-hours {\n    width: 100%;\n}",".global-header {\n    width: 100%;\n}",".navigation-primary {\n    background: white;\n}",".navigation-secondary {\n    background: white;\n}",".navigation-mobile {\n    background: white;\n}"],"file":"main.min.css"}